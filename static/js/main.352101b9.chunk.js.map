{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","salePrice","commissionPercentage","commissionGstIncluded","advertising","handleSalePriceChange","e","value","setState","Number","handleCommissionPercentageChange","handleAdvertisingChange","toggleCheckbox","prevState","grandTotal","this","commissionWithoutGst","commissionWithGst","GST","Grid","style","marginTop","columns","Row","Column","textAlign","paddingTop","Icon","name","Input","type","onChange","Checkbox","toggle","checked","toFixed","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.352101b9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Grid, Input, Checkbox, Icon } from 'semantic-ui-react';\n\nclass App extends Component {\n  state = { \n    salePrice: 0,\n    commissionPercentage: 0,\n    commissionGstIncluded: false,\n    advertising: 0\n  }\n\n  handleSalePriceChange = (e, { value }) => {\n    this.setState({ salePrice: Number(value) });\n  }\n\n  handleCommissionPercentageChange = (e, { value }) => {\n    this.setState({ commissionPercentage: Number(value) });\n  }\n\n  handleAdvertisingChange = (e, { value }) => {\n    this.setState({ advertising: Number(value) });\n  }  \n\n  toggleCheckbox = () => {\n    this.setState(prevState => ({ commissionGstIncluded: !prevState.commissionGstIncluded }))\n  }\n\n  render() {\n    const { salePrice, commissionPercentage, commissionGstIncluded, advertising } = this.state;\n    let commissionWithoutGst = 0;\n    let commissionWithGst = 0;\n    \n    let GST = 0;\n    let grandTotal = salePrice;\n    if ( commissionPercentage ) {\n      if ( commissionGstIncluded ) {\n        commissionWithGst = salePrice * commissionPercentage / 100.00;\n        commissionWithoutGst = salePrice * commissionPercentage / 100.00 / 1.1;\n      } else {\n        commissionWithoutGst = salePrice * commissionPercentage / 100.00 ;\n        commissionWithGst = salePrice * commissionPercentage / 100.00 * 1.1 ;\n      }\n      GST = commissionWithGst - commissionWithoutGst;\n    }\n\n    grandTotal = salePrice + commissionWithGst +  + advertising;\n\n    return (\n        <Grid style={{marginTop: \"20px\"}} columns=\"equal\">\n          <Grid.Row >\n            <Grid.Column textAlign=\"right\"><div style={{paddingTop: \"10px\"}}>Sale Price:</div>\n            </Grid.Column>\n            <Grid.Column >\n              <div>\n                <Icon name=\"dollar\" />\n                <Input \n                  type=\"number\"\n                  onChange={this.handleSalePriceChange}\n                />\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row >\n            <Grid.Column textAlign=\"right\">\n              <div style={{paddingTop: \"10px\"}}>Agent Commission:</div></Grid.Column>\n            <Grid.Column >\n              <div>            \n                <Input \n                  type=\"number\"\n                  onChange={this.handleCommissionPercentageChange}\n                />\n                <Icon name=\"percent\"/> \n              </div>\n \n            </Grid.Column>\n          </Grid.Row>  \n          <Grid.Row >\n            <Grid.Column textAlign=\"right\">\n              <div style={{paddingTop: \"10px\"}}>% includes GST:</div>\n            </Grid.Column>\n            <Grid.Column >\n              <Checkbox \n                style={{paddingTop: \"10px\"} } toggle\n                onChange={this.toggleCheckbox}\n                checked={commissionGstIncluded}\n              />\n            </Grid.Column>\n          </Grid.Row> \n          <Grid.Row >\n            <Grid.Column textAlign=\"right\">\n              <div style={{paddingTop: \"10px\"}}>\n                Commission (excl. GST):\n              </div>\n            </Grid.Column>\n            <Grid.Column >\n              <div style={{paddingTop: \"10px\"}}>\n                <Icon name=\"dollar\" />\n                <span>{commissionWithoutGst ? Number(commissionWithoutGst).toFixed(2) : \"\"}</span>\n              </div>\n            </Grid.Column>\n          </Grid.Row>                               \n          <Grid.Row >\n            <Grid.Column textAlign=\"right\"><div style={{paddingTop: \"10px\"}}>GST:</div></Grid.Column>\n            <Grid.Column >\n              <div style={{paddingTop: \"10px\"}}>\n                <Icon name=\"dollar\" />\n                <span>{ GST ? Number(GST).toFixed(2) : \"\"}</span>\n              </div>\n            </Grid.Column>\n          </Grid.Row>                               \n          <Grid.Row >\n            <Grid.Column textAlign=\"right\">\n              <div style={{paddingTop: \"10px\"}}>\n                Commission (incl. GST):\n              </div>\n            </Grid.Column>\n            <Grid.Column >\n              <div style={{paddingTop: \"10px\"}}><Icon name=\"dollar\" />\n                <span>{commissionWithGst ? Number(commissionWithGst).toFixed(2) : \"\"}</span>\n              </div>\n            </Grid.Column>\n          </Grid.Row>                               \n          <Grid.Row >\n            <Grid.Column textAlign=\"right\"><div style={{paddingTop: \"10px\"}}>Advertising:</div></Grid.Column>\n            <Grid.Column >\n              <div>\n                <Icon name=\"dollar\" />\n                <Input \n                  type=\"number\"\n                  onChange={this.handleAdvertisingChange}\n                />\n              </div>\n            </Grid.Column>\n          </Grid.Row>                               \n          <Grid.Row >\n            <Grid.Column textAlign=\"right\">\n              <div style={{paddingTop: \"10px\"}}>Grand Total:</div>\n            </Grid.Column>\n            <Grid.Column >\n              <div style={{paddingTop: \"10px\"}}>\n                <Icon name=\"dollar\" />\n                <span>{grandTotal? Number(grandTotal).toFixed(2) : \"\"}</span>\n              </div>\n            </Grid.Column>\n          </Grid.Row>                               \n        </Grid>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}